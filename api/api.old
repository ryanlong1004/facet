"""
api.py

This module provides the FastAPI application for managing face data.
"""

import logging
import os
from typing import Any, Dict, List

import uvicorn
from dotenv import load_dotenv
from fastapi import APIRouter, Depends, FastAPI, HTTPException, Path, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from fastapi.staticfiles import StaticFiles


from model.person import Person

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()

# Fetch the DuckDB database file path from the .env file
DB_PATH = os.getenv("DB_PATH", "faces.duckdb")

# Initialize FastAPI app
app = FastAPI(
    title=os.getenv("API_TITLE", "Faces API"),
    description=os.getenv("API_DESCRIPTION", "API for managing face and person data."),
    version=os.getenv("API_VERSION", "0.1"),
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "*"
    ],  # Allow all origins. Replace with specific origins for better security.
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# Initialize API routers
people_router = APIRouter(prefix="/people", tags=["People"])


# People Endpoints
@people_router.get(
    "/",
    response_model=List[Person],
    responses={400: {"description": "Bad Request"}},
)
async def get_all_persons():
    """
    Retrieve all persons.

    Returns:
        List[Person]: A list of all persons.
    """
    try:
        with PersonDataHandler(DB_PATH) as handler:
            persons = handler.read_all()
            return [Person.from_dict(person) for person in persons]
    except Exception as e:
        logger.error("Error retrieving all persons: %s", e)
        raise HTTPException(status_code=400, detail=str(e))


@people_router.get(
    "/{person_id}",
    response_model=Person,
    responses={404: {"description": "Person not found"}},
)
async def get_person(person_id: str):
    """
    Retrieve a person by their ID.

    Args:
        person_id (str): The unique ID of the person.

    Returns:
        Person: The person data.
    """
    try:
        with PersonDataHandler(DB_PATH) as handler:
            person_data = handler.read(person_id)
            if not person_data:
                raise HTTPException(status_code=404, detail="Person not found")
            return Person.from_dict(person_data)
    except Exception as e:
        logger.error("Error retrieving person with ID %s: %s", person_id, e)
        raise HTTPException(status_code=400, detail=str(e))


@people_router.post(
    "/",
    response_model=Person,
    responses={400: {"description": "Bad Request"}},
)
async def create_person(person: Person):
    """
    Create a new person.

    Args:
        person (Person): The person data to create.

    Returns:
        Person: The created person data.
    """
    try:
        with PersonDataHandler(DB_PATH) as handler:
            handler.create(person.person_id, person.person_name, person.face_ids)
            return person
    except Exception as e:
        logger.error("Error creating person: %s", e)
        raise HTTPException(status_code=400, detail=str(e))


@people_router.put(
    "/{person_id}",
    response_model=Person,
    responses={404: {"description": "Person not found"}},
)
async def update_person(person_id: str, person: Person):
    """
    Update an existing person.

    Args:
        person_id (str): The unique ID of the person.
        person (Person): The updated person data.

    Returns:
        Person: The updated person data.
    """
    try:
        with PersonDataHandler(DB_PATH) as handler:
            handler.update(person_id, person.person_name, person.face_ids)
            return person
    except Exception as e:
        logger.error("Error updating person with ID %s: %s", person_id, e)
        raise HTTPException(status_code=400, detail=str(e))


@people_router.delete(
    "/{person_id}",
    responses={404: {"description": "Person not found"}},
)
async def delete_person(person_id: str):
    """
    Delete a person by their ID.

    Args:
        person_id (str): The unique ID of the person.

    Returns:
        Dict[str, str]: A confirmation message.
    """
    try:
        with PersonDataHandler(DB_PATH) as handler:
            handler.delete(person_id)
            return {"message": f"Person with ID {person_id} deleted successfully."}
    except Exception as e:
        logger.error("Error deleting person with ID %s: %s", person_id, e)
        raise HTTPException(status_code=400, detail=str(e))


# Include routers in the main app
app.include_router(people_router)

# Serve the datasets folder as static files
app.mount("/datasets", StaticFiles(directory="datasets"), name="datasets")


def main():
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host=host, port=port)


if __name__ == "__main__":
    main()
